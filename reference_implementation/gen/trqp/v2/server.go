// Package trqp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package trqp

import (
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// AuthorizationResponseJWS A JWS wrapper for the AuthorizationResponse.
type AuthorizationResponseJWS struct {
	// Jws The JWS compact or JSON serialization containing the AuthorizationResponse.
	Jws string `json:"jws"`
}

// Error A generic error response.
type Error struct {
	// Details (Optional) Additional details about the error.
	Details *string `json:"details,omitempty"`

	// Error A short error code or message describing the error.
	Error string `json:"error"`
}

// RecognitionResponseJWS A JWS wrapper for the RecognitionResponse.
type RecognitionResponseJWS struct {
	// Jws The JWS compact or JSON serialization containing the RecognitionResponse.
	Jws string `json:"jws"`
}

// TrustRegistryMetadataJWS A JSON Web Signature (JWS) encapsulated Trust Registry Metadata object.
type TrustRegistryMetadataJWS struct {
	// Jws The JWS compact or JSON serialization containing the Trust Registry Metadata.
	Jws string `json:"jws"`
}

// CheckEcosystemRecognitionParams defines parameters for CheckEcosystemRecognition.
type CheckEcosystemRecognitionParams struct {
	// Time Timestamp in RFC3339 format indicating the point in time of recognition.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`

	// Nonce A unique client-generated nonce to prevent replay attacks.
	Nonce *string `form:"nonce,omitempty" json:"nonce,omitempty"`
}

// CheckAuthorizationStatusParams defines parameters for CheckAuthorizationStatus.
type CheckAuthorizationStatusParams struct {
	// Time The ISO8601/RFC3339 timestamp at which the authorization status is requested.
	// If omitted, the server MAY assume the current time or another default.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`

	// Nonce A unique client-generated nonce to prevent replay attacks.
	Nonce string `form:"nonce" json:"nonce"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check Ecosystem Recognition
	// (GET /ecosystem/recognition/{egf_did}/{ecosystem_id})
	CheckEcosystemRecognition(w http.ResponseWriter, r *http.Request, egfDid string, ecosystemId string, params CheckEcosystemRecognitionParams)
	// Check Entity Authorization Status
	// (GET /entity/authorized/{entity_id}/{authorization_id}/{egf_did})
	CheckAuthorizationStatus(w http.ResponseWriter, r *http.Request, entityId string, authorizationId string, egfDid string, params CheckAuthorizationStatusParams)
	// Retrieve Trust Registry Metadata
	// (GET /metadata)
	GetTrustRegistryMetadata(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Check Ecosystem Recognition
// (GET /ecosystem/recognition/{egf_did}/{ecosystem_id})
func (_ Unimplemented) CheckEcosystemRecognition(w http.ResponseWriter, r *http.Request, egfDid string, ecosystemId string, params CheckEcosystemRecognitionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check Entity Authorization Status
// (GET /entity/authorized/{entity_id}/{authorization_id}/{egf_did})
func (_ Unimplemented) CheckAuthorizationStatus(w http.ResponseWriter, r *http.Request, entityId string, authorizationId string, egfDid string, params CheckAuthorizationStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve Trust Registry Metadata
// (GET /metadata)
func (_ Unimplemented) GetTrustRegistryMetadata(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CheckEcosystemRecognition operation middleware
func (siw *ServerInterfaceWrapper) CheckEcosystemRecognition(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "egf_did" -------------
	var egfDid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "egf_did", runtime.ParamLocationPath, chi.URLParam(r, "egf_did"), &egfDid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "egf_did", Err: err})
		return
	}

	// ------------- Path parameter "ecosystem_id" -------------
	var ecosystemId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ecosystem_id", runtime.ParamLocationPath, chi.URLParam(r, "ecosystem_id"), &ecosystemId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ecosystem_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckEcosystemRecognitionParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	// ------------- Optional query parameter "nonce" -------------

	err = runtime.BindQueryParameter("form", true, false, "nonce", r.URL.Query(), &params.Nonce)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckEcosystemRecognition(w, r, egfDid, ecosystemId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CheckAuthorizationStatus operation middleware
func (siw *ServerInterfaceWrapper) CheckAuthorizationStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "entity_id" -------------
	var entityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "entity_id", runtime.ParamLocationPath, chi.URLParam(r, "entity_id"), &entityId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity_id", Err: err})
		return
	}

	// ------------- Path parameter "authorization_id" -------------
	var authorizationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authorization_id", runtime.ParamLocationPath, chi.URLParam(r, "authorization_id"), &authorizationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "authorization_id", Err: err})
		return
	}

	// ------------- Path parameter "egf_did" -------------
	var egfDid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "egf_did", runtime.ParamLocationPath, chi.URLParam(r, "egf_did"), &egfDid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "egf_did", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckAuthorizationStatusParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	// ------------- Required query parameter "nonce" -------------

	if paramValue := r.URL.Query().Get("nonce"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "nonce"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "nonce", r.URL.Query(), &params.Nonce)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckAuthorizationStatus(w, r, entityId, authorizationId, egfDid, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrustRegistryMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetTrustRegistryMetadata(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrustRegistryMetadata(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ecosystem/recognition/{egf_did}/{ecosystem_id}", wrapper.CheckEcosystemRecognition)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/entity/authorized/{entity_id}/{authorization_id}/{egf_did}", wrapper.CheckAuthorizationStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/metadata", wrapper.GetTrustRegistryMetadata)
	})

	return r
}
