// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package admin

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// AuthorizeEntryResponse defines model for AuthorizeEntryResponse.
type AuthorizeEntryResponse struct {
	Message *string `json:"message,omitempty"`
}

// BasicResponse defines model for BasicResponse.
type BasicResponse struct {
	Message *string `json:"message,omitempty"`
}

// Ecosystem defines model for Ecosystem.
type Ecosystem struct {
	Entries  *[]Entry          `json:"entries,omitempty"`
	Metadata EcosystemMetadata `json:"metadata"`
}

// EcosystemMetadata defines model for EcosystemMetadata.
type EcosystemMetadata struct {
	Description *string `json:"description,omitempty"`
	Did         string  `json:"did"`
	Name        *string `json:"name,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// Entry defines model for Entry.
type Entry struct {
	Did    *string `json:"did,omitempty"`
	Status *Status `json:"status,omitempty"`
}

// RecognizeEcosystemResponse defines model for RecognizeEcosystemResponse.
type RecognizeEcosystemResponse struct {
	Message *string `json:"message,omitempty"`
}

// Status defines model for Status.
type Status struct {
	Active *bool   `json:"active,omitempty"`
	Detail *string `json:"detail,omitempty"`
}

// AuthorizeEntryParams defines parameters for AuthorizeEntry.
type AuthorizeEntryParams struct {
	Did             string `form:"did" json:"did"`
	Egf             string `form:"egf" json:"egf"`
	AuthorizationId string `form:"authorization_id" json:"authorization_id"`
	Active          *bool  `form:"active,omitempty" json:"active,omitempty"`
}

// RecognizeEcosystemParams defines parameters for RecognizeEcosystem.
type RecognizeEcosystemParams struct {
	Did    string  `form:"did" json:"did"`
	Egf    string  `form:"egf" json:"egf"`
	Active *bool   `form:"active,omitempty" json:"active,omitempty"`
	Scope  *string `form:"scope,omitempty" json:"scope,omitempty"`
}

// CreateEcosystemJSONRequestBody defines body for CreateEcosystem for application/json ContentType.
type CreateEcosystemJSONRequestBody = Ecosystem

// UpdateEcosystemJSONRequestBody defines body for UpdateEcosystem for application/json ContentType.
type UpdateEcosystemJSONRequestBody = Ecosystem

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Ecosystems
	// (GET /ecosystems)
	ListEcosystems(w http.ResponseWriter, r *http.Request)
	// Create Ecosystem
	// (POST /ecosystems)
	CreateEcosystem(w http.ResponseWriter, r *http.Request)
	// Authorize Entry
	// (POST /ecosystems/authorizations)
	AuthorizeEntry(w http.ResponseWriter, r *http.Request, params AuthorizeEntryParams)
	// Recognize Ecosystem
	// (POST /ecosystems/recognitions)
	RecognizeEcosystem(w http.ResponseWriter, r *http.Request, params RecognizeEcosystemParams)
	// Remove Ecosystem
	// (DELETE /ecosystems/{did})
	RemoveEcosystem(w http.ResponseWriter, r *http.Request, did string)
	// Get Ecosystem
	// (GET /ecosystems/{did})
	GetEcosystem(w http.ResponseWriter, r *http.Request, did string)
	// Update Ecosystem
	// (PUT /ecosystems/{did})
	UpdateEcosystem(w http.ResponseWriter, r *http.Request, did string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List Ecosystems
// (GET /ecosystems)
func (_ Unimplemented) ListEcosystems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Ecosystem
// (POST /ecosystems)
func (_ Unimplemented) CreateEcosystem(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Authorize Entry
// (POST /ecosystems/authorizations)
func (_ Unimplemented) AuthorizeEntry(w http.ResponseWriter, r *http.Request, params AuthorizeEntryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Recognize Ecosystem
// (POST /ecosystems/recognitions)
func (_ Unimplemented) RecognizeEcosystem(w http.ResponseWriter, r *http.Request, params RecognizeEcosystemParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove Ecosystem
// (DELETE /ecosystems/{did})
func (_ Unimplemented) RemoveEcosystem(w http.ResponseWriter, r *http.Request, did string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Ecosystem
// (GET /ecosystems/{did})
func (_ Unimplemented) GetEcosystem(w http.ResponseWriter, r *http.Request, did string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Ecosystem
// (PUT /ecosystems/{did})
func (_ Unimplemented) UpdateEcosystem(w http.ResponseWriter, r *http.Request, did string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEcosystems operation middleware
func (siw *ServerInterfaceWrapper) ListEcosystems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEcosystems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEcosystem operation middleware
func (siw *ServerInterfaceWrapper) CreateEcosystem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEcosystem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthorizeEntry operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeEntry(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthorizeEntryParams

	// ------------- Required query parameter "did" -------------

	if paramValue := r.URL.Query().Get("did"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "did"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "did", r.URL.Query(), &params.Did)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "did", Err: err})
		return
	}

	// ------------- Required query parameter "egf" -------------

	if paramValue := r.URL.Query().Get("egf"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "egf"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "egf", r.URL.Query(), &params.Egf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "egf", Err: err})
		return
	}

	// ------------- Required query parameter "authorization_id" -------------

	if paramValue := r.URL.Query().Get("authorization_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "authorization_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "authorization_id", r.URL.Query(), &params.AuthorizationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "authorization_id", Err: err})
		return
	}

	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", r.URL.Query(), &params.Active)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "active", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthorizeEntry(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RecognizeEcosystem operation middleware
func (siw *ServerInterfaceWrapper) RecognizeEcosystem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RecognizeEcosystemParams

	// ------------- Required query parameter "did" -------------

	if paramValue := r.URL.Query().Get("did"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "did"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "did", r.URL.Query(), &params.Did)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "did", Err: err})
		return
	}

	// ------------- Required query parameter "egf" -------------

	if paramValue := r.URL.Query().Get("egf"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "egf"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "egf", r.URL.Query(), &params.Egf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "egf", Err: err})
		return
	}

	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", r.URL.Query(), &params.Active)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "active", Err: err})
		return
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", r.URL.Query(), &params.Scope)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scope", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RecognizeEcosystem(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RemoveEcosystem operation middleware
func (siw *ServerInterfaceWrapper) RemoveEcosystem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, chi.URLParam(r, "did"), &did)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "did", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveEcosystem(w, r, did)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEcosystem operation middleware
func (siw *ServerInterfaceWrapper) GetEcosystem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, chi.URLParam(r, "did"), &did)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "did", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEcosystem(w, r, did)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateEcosystem operation middleware
func (siw *ServerInterfaceWrapper) UpdateEcosystem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, chi.URLParam(r, "did"), &did)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "did", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateEcosystem(w, r, did)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ecosystems", wrapper.ListEcosystems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ecosystems", wrapper.CreateEcosystem)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ecosystems/authorizations", wrapper.AuthorizeEntry)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ecosystems/recognitions", wrapper.RecognizeEcosystem)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/ecosystems/{did}", wrapper.RemoveEcosystem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ecosystems/{did}", wrapper.GetEcosystem)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ecosystems/{did}", wrapper.UpdateEcosystem)
	})

	return r
}
